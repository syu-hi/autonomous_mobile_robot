#!/usr/bin/env python
PACKAGE = "autonomous_mobile_robot"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
#
gen.add("robotNum", int_t, 0, "An int parameter", 2, 2, 10)
gen.add("robotPosX", double_t, 0, "A double parameter", 0, -10, 10)
gen.add("robotPosY", double_t, 0, "A double parameter", 0, -10, 10)
gen.add("robotYaw", double_t, 0, "A double parameter", 0, -3.14, 1.57)
gen.add("obstaclePosX", double_t, 0, "A double parameter", 3.5, -10, 10)
gen.add("obstaclePosY", double_t, 0, "A double parameter", -3.5, -10, 10)
gen.add("obstacleYaw", double_t, 0, "A double parameter", 0, -3.14, 3.14)
gen.add("robotVel", double_t, 0, "A double parameter", 0, 1, 1)
gen.add("robotAngularVel", double_t, 0, "A double parameter", 0, -1, 1)
gen.add("obstacleVel", double_t, 0, "A double parameter", 0.4, -1, 1)
gen.add("obstacleAngularVel", double_t, 0, "A double parameter", 0, -1, 1)
gen.add("distanceThreshold", double_t, 0, "A double parameter", 1, 0, 3)
gen.add("outputCSV", bool_t, 0, "A Boolean parameter", False)
gen.add("fileName", str_t, 0, "A string parameter", "sample")

# sample
# gen.add("str_param", str_t, 0, "A string parameter", "Hello World")
# gen.add("bool_param", bool_t, 0, "A Boolean parameter", True)
size_enum = gen.enum([ gen.const("None", int_t, 0, "A small constant"),
                  gen.const("marker", int_t, 1, "A large constant")],
                  "An enum to set size")
gen.add("debugType", int_t, 0, "A size parameter which is edited via an enum", 0, 0, 1, edit_method=size_enum)

exit(gen.generate(PACKAGE, "autonomous_mobile_robot", "recordExData"))